version: '3.4'

# This Compose file is expected to be used with the devnet-up.sh script.
# The volumes below mount the configs generated by the script into each
# service.

volumes:
  l1_data:
  l2_data:
  l2_relay_data:
  op_log:
  golang_cache:
  psql_data:
    driver: local


services:
  l1:
    build:
      context: .
      dockerfile: Dockerfile.l1
    ports:
      - "8545:8545"
      - "8546:8546"
      - "7060:6060"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
      - "l1_data:/db"
      - "${PWD}/../.devnet/genesis-l1.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"

  l2:
    build:
      context: .
      dockerfile: Dockerfile.l2
    ports:
      - "9545:8545"
      - "9551:8551"
      - "18060:6060"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
      - "l2_data:/db"
      - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
    entrypoint:  # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--authrpc.jwtsecret=/config/test-jwt-secret.txt"

  l2-relay:
    build:
      context: .
      dockerfile: Dockerfile.l2
    ports:
      - "9500:8545"
      - "9501:8551"
      - "18061:6060"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
      - "l2_relay_data:/db"
      - "${PWD}/../.devnet/genesis-l2.json:/genesis.json"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
    entrypoint:  # pass the L2 specific flags by overriding the entry-point and adding extra arguments
      - "/bin/sh"
      - "/entrypoint.sh"
      - "--authrpc.jwtsecret=/config/test-jwt-secret.txt"

  op-node-relay:
    depends_on:
      - l1
      - l2
    image: "us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.1.1"
    command: >
      op-node
      --l1=ws://l1:8546
      --l2=http://l2:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8500
      --rpc.enable-admin
    ports:
      - "7500:8500"
      - "7501:8501"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${PWD}/../.devnet/rollup.json:/rollup.json"
      - op_log:/op_log

  op-node:
    depends_on:
      - l1
      - l2
    build:
      context: ../
      dockerfile: ./op-node/Dockerfile
    command: >
      op-node
      --l1=ws://l1:8546
      --l2=http://l2:8551
      --l2.jwt-secret=/config/test-jwt-secret.txt
      --sequencer.enabled
      --sequencer.l1-confs=0
      --verifier.l1-confs=0
      --p2p.sequencer.key=8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
      --rollup.config=/rollup.json
      --rpc.addr=0.0.0.0
      --rpc.port=8545
      --p2p.listen.ip=0.0.0.0
      --p2p.listen.tcp=9003
      --p2p.listen.udp=9003
      --p2p.scoring.peers=light
      --p2p.ban.peers=true
      --snapshotlog.file=/op_log/snapshot.log
      --p2p.priv.path=/config/p2p-node-key.txt
      --metrics.enabled
      --metrics.addr=0.0.0.0
      --metrics.port=7300
      --pprof.enabled
      --rpc.enable-admin
    ports:
      - "7545:8545"
      - "7546:8546"
      - "9003:9003"
      - "7300:7300"
      - "6060:6060"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
      - "${PWD}/p2p-sequencer-key.txt:/config/p2p-sequencer-key.txt"
      - "${PWD}/p2p-node-key.txt:/config/p2p-node-key.txt"
      - "${PWD}/test-jwt-secret.txt:/config/test-jwt-secret.txt"
      - "${PWD}/../.devnet/rollup.json:/rollup.json"
      - op_log:/op_log

  op-batcher:
    depends_on:
      - l1
      - l2
      - op-node
    build:
      context: ../
      dockerfile: ./op-batcher/Dockerfile
    ports:
      - "6061:6060"
      - "7301:7300"
      - "6545:8545"
    volumes:
      - "golang_cache:/root/go/pkg/mod"

    environment:
      OP_BATCHER_L1_ETH_RPC: http://l1:8545
      OP_BATCHER_L2_ETH_RPC: http://l2:8545
      OP_BATCHER_ROLLUP_RPC: http://op-node:8545
      OP_BATCHER_MAX_CHANNEL_DURATION: 1
      OP_BATCHER_SUB_SAFETY_MARGIN: 4 # SWS is 15, ChannelTimeout is 40
      OP_BATCHER_POLL_INTERVAL: 1s
      OP_BATCHER_NUM_CONFIRMATIONS: 1
      OP_BATCHER_MNEMONIC: test test test test test test test test test test test junk
      OP_BATCHER_SEQUENCER_HD_PATH: "m/44'/60'/0'/0/2"
      OP_BATCHER_PPROF_ENABLED: "true"
      OP_BATCHER_METRICS_ENABLED: "true"
      OP_BATCHER_RPC_ENABLE_ADMIN: "true"

  op-proposer:
    depends_on:
      - l1
      - l2
      - op-node
    build:
      context: ../
      dockerfile: ./op-proposer/Dockerfile
    ports:
      - "6062:6060"
      - "7302:7300"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
    environment:
      OP_PROPOSER_L1_ETH_RPC: http://l1:8545
      OP_PROPOSER_ROLLUP_RPC: http://op-node:8545
      OP_PROPOSER_POLL_INTERVAL: 1s
      OP_PROPOSER_NUM_CONFIRMATIONS: 1
      OP_PROPOSER_MNEMONIC: test test test test test test test test test test test junk
      OP_PROPOSER_L2_OUTPUT_HD_PATH: "m/44'/60'/0'/0/1"
      OP_PROPOSER_L2OO_ADDRESS: "${L2OO_ADDRESS}"
      OP_PROPOSER_PPROF_ENABLED: "true"
      OP_PROPOSER_METRICS_ENABLED: "true"
      OP_PROPOSER_ALLOW_NON_FINALIZED: "true"




  stateviz:
    build:
      context: ../
      dockerfile: ./ops-bedrock/Dockerfile.stateviz
    command:
      - stateviz
      - -addr=0.0.0.0:8080
      - -snapshot=/op_log/snapshot.log
      - -refresh=10s
    ports:
      - "9090:8080"
    volumes:
      - "golang_cache:/root/go/pkg/mod"
      - op_log:/op_log:ro


  # Mev Boost part
  mev-relay-redis:
    image: redis
    restart: always
    ports:
      - '6379:6379'

#  memcached:
#    image: memcached
#    restart: always
#    ports:
#      - '11211:11211'

  mev-relay-db:
    image: postgres
    restart: always
    volumes:
      - 'psql_data:/var/lib/postgresql/data'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  # phpMyAdmin-like DB browser, localhost:8093
  mev-relay-adminer:
    image: adminer
    restart: always
    depends_on:
      - mev-relay-db
    ports:
      - '8093:8080'
    environment:
      ADMINER_PLUGINS: tables-filter tinymce

  mev-relay-migrations:
    build:
      context: ../../mev-relay/
    depends_on:
      - mev-relay-db
    command:
      tool migrate --db "postgresql://postgres:postgres@mev-relay-db:5432/postgres?sslmode=disable"

  mev-relay-api:
    build:
      context: ../../mev-relay/
    depends_on:
      mev-relay-migrations:
        condition: service_completed_successfully
      mev-relay-redis:
        condition: service_started
    command: >
      api
      --debug
      --db "postgresql://postgres:postgres@mev-relay-db:5432/postgres?sslmode=disable"
      --redis-uri "mev-relay-redis:6379"
      --listen-addr "0.0.0.0:9062"
      --beacon-uris "http://op-node:8546"
      --secret-key "0x3dd5f69c2e334a81ee84deb2f2da0e460b0b90aca2cd2e7d948cce056982c119"
    environment:
      - DISABLE_PAYLOAD_DATABASE_STORAGE=1
      - LOG_LEVEL=debug

  # flags
  # --pprof

  mev-relay-housekeeper:
    build:
      context: ../../mev-relay/
    depends_on:
      mev-relay-migrations:
        condition: service_completed_successfully
      mev-relay-redis:
        condition: service_started
    command: >
      housekeeper
      --db "postgresql://postgres:postgres@mev-relay-db:5432/postgres?sslmode=disable"
    environment:
      - LOG_LEVEL=debug
